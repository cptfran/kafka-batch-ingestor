name: CI Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  validate-docker-compose:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Validate docker-compose.yml
        run: docker compose config

  build-java-app:
    runs-on: ubuntu-latest
    needs: validate-docker-compose
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      
      - name: Build and test with Maven
        run: |
          chmod +x mvnw
          ./mvnw clean verify -X
      
      - name: Store build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar
          retention-days: 5

  build-python-producer:
    runs-on: ubuntu-latest
    needs: validate-docker-compose
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: Install dependencies
        working-directory: ./producer
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Lint with flake8
        working-directory: ./producer
        run: |
          pip install flake8
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  build-docker-images:
    runs-on: ubuntu-latest
    needs: [build-java-app, build-python-producer]
    steps:
      - uses: actions/checkout@v4
      
      - name: Create .env file for Docker Compose
        run: |
          echo "POSTGRES_DB=testdb" > .env
          echo "POSTGRES_USER=testuser" > .env
          echo "POSTGRES_PASSWORD=testpassword" > .env
      
      - name: Verify Docker Compose build
        run: docker compose build